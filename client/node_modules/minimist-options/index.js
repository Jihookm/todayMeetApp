'use strict';

const isPlainObject = require('is-plain-obj');
const arrify = require('arrify');
<<<<<<< HEAD
<<<<<<< HEAD
=======
const kindOf = require('kind-of');
>>>>>>> 5387c5b8 (adding redux)
=======
>>>>>>> 3aa3ad78 (re)

const push = (obj, prop, value) => {
	if (!obj[prop]) {
		obj[prop] = [];
	}

	obj[prop].push(value);
};

const insert = (obj, prop, key, value) => {
	if (!obj[prop]) {
		obj[prop] = {};
	}

	obj[prop][key] = value;
};

<<<<<<< HEAD
<<<<<<< HEAD
const passthroughOptions = ['stopEarly', 'unknown', '--'];

module.exports = options => {
=======
const prettyPrint = output => {
	return Array.isArray(output) ?
		`[${output.map(prettyPrint).join(', ')}]` :
		kindOf(output) === 'string' ? JSON.stringify(output) : output;
};

const resolveType = value => {
	if (Array.isArray(value) && value.length > 0) {
		const [element] = value;
		return `${kindOf(element)}-array`;
	}

	return kindOf(value);
};

const normalizeExpectedType = (type, defaultValue) => {
	const inferredType = type === 'array' ? 'string-array' : type;

	if (arrayTypes.includes(inferredType) && Array.isArray(defaultValue) && defaultValue.length === 0) {
		return 'array';
	}

	return inferredType;
};

=======
>>>>>>> 3aa3ad78 (re)
const passthroughOptions = ['stopEarly', 'unknown', '--'];

<<<<<<< HEAD
const buildOptions = options => {
>>>>>>> 5387c5b8 (adding redux)
=======
module.exports = options => {
>>>>>>> 3aa3ad78 (re)
	options = options || {};

	const result = {};

	passthroughOptions.forEach(key => {
		if (options[key]) {
			result[key] = options[key];
		}
	});

	Object.keys(options).forEach(key => {
		let value = options[key];

		if (key === 'arguments') {
			key = '_';
		}

		// If short form is used
		// convert it to long form
		// e.g. { 'name': 'string' }
		if (typeof value === 'string') {
			value = {type: value};
		}

		if (isPlainObject(value)) {
			const props = value;
<<<<<<< HEAD
<<<<<<< HEAD

			if (props.type) {
				const type = props.type;

				if (type === 'string') {
					push(result, 'string', key);
				}

				if (type === 'boolean') {
					push(result, 'boolean', key);
				}
			}

			const aliases = arrify(props.alias);

			aliases.forEach(alias => {
				insert(result, 'alias', alias, key);
			});

			if ({}.hasOwnProperty.call(props, 'default')) {
				insert(result, 'default', key, props.default);
			}
=======
			const {type} = props;
=======
>>>>>>> 3aa3ad78 (re)

			if (props.type) {
				const type = props.type;

				if (type === 'string') {
					push(result, 'string', key);
				}

				if (type === 'boolean') {
					push(result, 'boolean', key);
				}
			}

			const aliases = arrify(props.alias);

			aliases.forEach(alias => {
				insert(result, 'alias', alias, key);
			});
<<<<<<< HEAD
>>>>>>> 5387c5b8 (adding redux)
=======

			if ({}.hasOwnProperty.call(props, 'default')) {
				insert(result, 'default', key, props.default);
			}
>>>>>>> 3aa3ad78 (re)
		}
	});

	return result;
};
<<<<<<< HEAD
<<<<<<< HEAD
=======

module.exports = buildOptions;
module.exports.default = buildOptions;
>>>>>>> 5387c5b8 (adding redux)
=======
>>>>>>> 3aa3ad78 (re)
